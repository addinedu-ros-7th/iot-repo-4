import numpy as np
import pandas as pd
import cv2
import sys
import pymysql
import sys
import time

# PyQt
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5 import uic
from pyqtgraph.Qt import QtCore
import pyqtgraph as pg

# Arduino Serial Communication
import serial
from serial import SerialException
import serial.tools
from serial.tools import list_ports


# 필수 모듈 import
import sys
import os
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtCore import Qt
import cv2
# import torch
import numpy as np
from PyQt5 import uic

import os
os.environ["QT_LOGGING_RULES"] = "*.debug=false"

from use_table import UserTable,SmartFarmTable
current_dir = os.path.dirname(os.path.abspath(__file__))

# Define paths to the AI and gui_and_system directories
parent_dir_AI = os.path.join(current_dir, '..', 'AI')

# Add these directories to sys.path for module importing
sys.path.append(os.path.abspath(parent_dir_AI))


# GUI Theme
# import qdarktheme

# PyGt Desinger File
from PyQt5 import uic

current_dir = os.path.dirname(os.path.abspath(__file__))
ui_file_path = os.path.join(current_dir, 'test.ui')

form_class = uic.loadUiType(ui_file_path)[0]

# 포트 자동 인식
ports = serial.tools.list_ports.comports()
portlist = []
for port in ports:
    portlist.append(str(port))
main_usd_port = portlist[-1].split(' ')[0]

# Main Window
class SunnyMainWindow(QMainWindow, form_class): # QWidget vs QMainWindow
    def __init__(self): 
        super(SunnyMainWindow, self).__init__()
        self.setupUi(self)

        self.arduinoData = serial.Serial(main_usd_port, 9600) # TinkerCAD serial 가능?
        
            # SET ATTRIBUTE PROPERTY
        # Arduino connection status 
        self.le_connection_status.setText("Connecting to Arduino...")
    
        # 그래프가 들어가 attribute 생성
        self.humidity_canvas = pg.GraphicsLayoutWidget()
        # PyQt에서 만든 attribute에 삽입
        self.wdg_humidity.setLayout(QVBoxLayout())
        self.wdg_humidity.layout().addWidget(self.humidity_canvas)

        self.temperature_canvas = pg.GraphicsLayoutWidget()             
        self.wdg_temperature.setLayout(QVBoxLayout())
        self.wdg_temperature.layout().addWidget(self.temperature_canvas)

        self.HumidityPlot = self.humidity_canvas.addPlot()
        self.HumidityPlot.setXRange(0,20)
        self.HumidityPlot.setYRange(0,100)
        self.HumidityPlotLine = self.HumidityPlot.plot(pen= 'b') # 그래프라인만 따로 update 되기 떄문에

        self.temperaturePlot = self.temperature_canvas.addPlot()
        self.temperaturePlot.setXRange(0,20)
        self.temperaturePlot.setYRange(0,30)
        self.temperaturePlotLine = self.temperaturePlot.plot(pen= 'g') # 그래프라인만 따로 update 되기 떄문에

        self.x = np.arange(20)  # x range 20으로 고정
        self.temperature_data = np.zeros(20) # array로 저장
        self.humidity_data = np.zeros(20)


        self.temperature_str = "0"
        self.humidity_str = "0"
        self.waterlevel_str = "0"
        self.nutritionwaterlevel_str = "0"

        self.temperature = 0
        self.humidity = 0
        self.soilhumidity = 0
        self.waterlevel = 0
        self.nutritionwaterlevel = 0
        self.mapped_waterlevel = 0
        self.mapped_nutritionwaterlevel = 0


        # 업데이트 주기
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_plot)
        self.timer.start(2000)



    #DeepLearing

    # GUI Graph Plot 
    def read_arduino_data(self):
        if self.arduinoData.in_waiting > 0:
            data = self.arduinoData.readline().decode('utf-8').strip()
            try:
                if "Temperature:" in data and "Humidity:" in data and 'Water Level:' in data and 'Nutrition Water Level:' in data:
                    self.temperature_str = data.split("Temperature:")[1].split(",")[0].strip()
                    self.humidity_str = data.split("Humidity:")[1].split(",")[0].strip()
                    self.waterlevel_str = data.split("Water Level:")[1].split(",")[0].strip()
                    self.nutritionwaterlevel_str = data.split("Nutrition Water Level:")[1].split(",")[0].strip()

                    # Convert values
                    self.temperature = int(self.temperature_str)
                    self.humidity = int(self.humidity_str)
                    self.soilhumidity = int(self.humidity_str)
                    self.waterlevel = int(self.waterlevel_str)
                    self.mapped_waterlevel = int(((self.waterlevel - 0) * (100 - 50) / (650 - 0)) + 50)
                    self.nutritionwaterlevel = int(self.nutritionwaterlevel_str)
                    self.mapped_nutritionwaterlevel = int(((self.nutritionwaterlevel - 0) * (100 - 50) / (650 - 0)) + 50)
            except (ValueError, IndexError):
                print("Data format error:", data) 

            try:
                self.arduinoData = serial.Serial(main_usd_port, 9600)
                self.le_connection_status.setText("Connected to Arduino")
            except SerialException:
                self.arduinoData = serial.Serial(main_usd_port, 9600) # TinkerCAD serial 가능?
                self.le_connection_status.setText("Arduino connection failed")
                print("Failed to connect to Arduino")
            print(data)

    def update_plot(self):
        self.read_arduino_data()  # Call data-reading function

        # Update plot data
        self.temperature_data = np.roll(self.temperature_data, -1)
        self.temperature_data[-1] = self.temperature
        self.humidity_data = np.roll(self.humidity_data, -1)
        self.humidity_data[-1] = self.humidity

        # Update GUI elements
        self.le_temperature.setText(f"{self.temperature_str} °C")
        self.le_humidity.setText(f"{self.humidity_str} %")
        self.le_waterlevel.setText(f"{self.mapped_waterlevel} %")
        self.le_nutwaterlevel.setText(f"{self.mapped_nutritionwaterlevel} %")

        self.pbar_waterlevel.setValue(self.mapped_waterlevel)
        self.pbar_nutwaterlevel.setValue(self.mapped_nutritionwaterlevel)

        # Update graph lines
        self.temperaturePlotLine.setData(self.x, self.temperature_data)
        self.HumidityPlotLine.setData(self.x, self.humidity_data)

        farm_table = SmartFarmTable()
        farm_table.append(self.mapped_waterlevel , self.mapped_nutritionwaterlevel, self.soilhumidity, self.humidity, self.temperature , 0 , 0 , 0 )

    def closeEvent(self, event):
        self.arduinoData.close()
        self.cap.release()
        event.accept()
    
if __name__ == '__main__':
    App = QApplication(sys. argv)
    # set_theme(App, theme='dark')
    myWindow = SunnyMainWindow()
    myWindow.show()
    sys.exit(App.exec())
